// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String? // Hashed password
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  // Relations
  managedCandidates   Candidate[] @relation("managedBy")
  reviewedCandidates  Candidate[] @relation("reviewedBy")
  createdCandidates   Candidate[] @relation("createdBy")
  conductedInterviews Interview[] @relation("interviewer")
  providedFeedbacks   Feedback[]
  createdInterviews   Interview[] @relation("createdByUser")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Candidate {
  id         String          @id @default(cuid())
  name       String
  email      String
  phone      String?
  resumeUrl  String?
  status     CandidateStatus @default(NEW)
  source     String?
  position   Position?       @relation(fields: [positionId], references: [id])
  positionId String?

  // Relations
  interviews Interview[]
  feedbacks  Feedback[]
  tags       Tag[]
  notes      Note[]

  // User relations
  createdBy    User    @relation("createdBy", fields: [createdById], references: [id])
  createdById  String
  managedBy    User?   @relation("managedBy", fields: [managedById], references: [id])
  managedById  String?
  reviewedBy   User?   @relation("reviewedBy", fields: [reviewedById], references: [id])
  reviewedById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Position {
  id         String      @id @default(cuid())
  title      String
  department String?
  isActive   Boolean     @default(true)
  workflow   Workflow?   @relation(fields: [workflowId], references: [id])
  workflowId String?
  candidates Candidate[]
  interviews Interview[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Interview {
  id        String          @id @default(cuid())
  title     String
  startTime DateTime
  endTime   DateTime
  location  String? // Can be URL for virtual interviews
  type      InterviewType   @default(TECHNICAL)
  status    InterviewStatus @default(SCHEDULED)

  // Relations
  candidate    Candidate  @relation(fields: [candidateId], references: [id])
  candidateId  String
  position     Position   @relation(fields: [positionId], references: [id])
  positionId   String
  interviewers User[]     @relation("interviewer")
  feedbacks    Feedback[]
  stage        Stage?     @relation(fields: [stageId], references: [id])
  stageId      String?
  createdBy    User       @relation("createdByUser", fields: [createdById], references: [id])
  createdById  String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Feedback {
  id             String         @id @default(cuid())
  rating         Int // 1-5 or custom scale
  recommendation Recommendation @default(NO_DECISION)
  comment        String?        @db.Text

  // Relations
  interview        Interview         @relation(fields: [interviewId], references: [id])
  interviewId      String
  candidate        Candidate         @relation(fields: [candidateId], references: [id])
  candidateId      String
  interviewer      User              @relation(fields: [interviewerId], references: [id])
  interviewerId    String
  skillAssessments SkillAssessment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SkillAssessment {
  id         String   @id @default(cuid())
  skill      String
  rating     Int // 1-5 or custom scale
  comment    String?
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
}

model Workflow {
  id          String     @id @default(cuid())
  name        String
  description String?
  isDefault   Boolean    @default(false)
  positions   Position[]
  stages      Stage[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Stage {
  id          String      @id @default(cuid())
  name        String
  description String?
  order       Int
  workflow    Workflow    @relation(fields: [workflowId], references: [id])
  workflowId  String
  interviews  Interview[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Tag {
  id         String      @id @default(cuid())
  name       String      @unique
  candidates Candidate[]
}

model Note {
  id          String    @id @default(cuid())
  content     String    @db.Text
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  INTERVIEWER
  USER
}

enum CandidateStatus {
  NEW
  IN_PROCESS
  OFFERED
  HIRED
  REJECTED
  WITHDRAWN
}

enum InterviewType {
  SCREENING
  TECHNICAL
  BEHAVIORAL
  MANAGER
  FINAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELED
  NO_SHOW
}

enum Recommendation {
  STRONG_HIRE
  HIRE
  NO_DECISION
  NO_HIRE
  STRONG_NO_HIRE
}
